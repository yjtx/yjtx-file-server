{"version":3,"sources":["localFiles.ts"],"names":["LocalFiles","LocalFiles.constructor","LocalFiles.getMineType","LocalFiles.onGet","LocalFiles.writeFile"],"mappings":"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","file":"localFiles.js","sourcesContent":["/**\n * Created by yjtx on 16/2/4.\n */\nimport http = require('http');\nimport url = require('url');\nimport fs = require('fs');\nimport path = require('path');\nimport os = require(\"os\");\nimport params = require('./core/ParamsAnalyze');\n\nvar mine = {\n    \"css\": \"text/css\",\n    \"gif\": \"image/gif\",\n    \"html\": \"text/html\",\n    \"ico\": \"image/x-icon\",\n    \"jpeg\": \"image/jpeg\",\n    \"jpg\": \"image/jpeg\",\n    \"js\": \"text/javascript\",\n    \"json\": \"application/json\",\n    \"pdf\": \"application/pdf\",\n    \"png\": \"image/png\",\n    \"svg\": \"image/svg+xml\",\n    \"swf\": \"application/x-shockwave-flash\",\n    \"tiff\": \"image/tiff\",\n    \"txt\": \"text/plain\",\n    \"wav\": \"audio/x-wav\",\n    \"wma\": \"audio/x-ms-wma\",\n    \"mp3\": \"audio/mpeg\",\n    \"wmv\": \"video/x-ms-wmv\",\n    \"xml\": \"text/xml\"\n};\n\n\nexport class LocalFiles {\n    private getMineType(mineType:string):string {\n        if (mineType == null) {\n            return null;\n        }\n        return mine[mineType] || mineType;\n    }\n\n    onGet(url, mineType:string, response) {\n        this.writeFile(url, mineType, response);\n    }\n\n    writeFile(url, mineType:string, response) {\n        var self = this;\n\n        var realPath = path.join(url);\n\n        var ext = path.extname(realPath);\n        ext = ext ? ext.slice(1) : 'unknown';\n        fs.exists(realPath, function (exists) {\n            if (!exists) {\n                response.writeHead(404, {\n                    'Content-Type': 'text/plain'\n                });\n                console.log(realPath);\n                response.write(\"This request URL \" + url + \" was not found on this server.\");\n                response.end();\n            } else {\n                fs.readFile(realPath, \"binary\", function (err, file) {\n                    if (err) {\n                        response.writeHead(500, {\n                            'Content-Type': 'text/plain'\n                        });\n                        response.end(err.toString());\n                    } else {\n                        var contentType = self.getMineType(mineType) || mine[ext];\n\n                        var resInfo = {\n                            'Accept-Ranges': 'bytes',\n                            'Content-Length': file.length,\n                            'Access-Control-Allow-Origin': '*'\n                        };\n\n                        if (contentType) {\n                            resInfo[\"Content-Type\"] = contentType;\n                        }\n\n                        response.writeHead(200, resInfo);\n                        response.write(file, \"binary\");\n                        response.end();\n                    }\n                });\n            }\n        });\n    }\n}"],"sourceRoot":"/source/"}